[gd_scene load_steps=6 format=3 uid="uid://dl5kuer716c4x"]

[ext_resource type="AudioStream" uid="uid://c23c25suwf7fj" path="res://assets/hit1.ogg" id="1_mccf2"]
[ext_resource type="Theme" uid="uid://chcdb3lcs1co4" path="res://themes/label_theme.tres" id="2_dvq8s"]
[ext_resource type="Theme" uid="uid://cx1rlr5xncb2h" path="res://themes/button_theme.tres" id="3_52v4h"]

[sub_resource type="GDScript" id="GDScript_ruhoe"]
script/source = "extends Node2D

signal change_scene_to(scene_enum)

var tile_scene = preload(\"res://views/tileboard/tile.tscn\")
var tile_label_scene = preload(\"res://views/tileboard/tile_board_number.tscn\")

var tile_size
var focused_tile
var focused_tile_label
var prev_tile_state
var tile_drag_edit_mode
var pan = false
var puzzle_array
var tile_array := []
var highlighted_numbers := []

var grid_guidelines := []

var time_passed = 0

var points_to_win = 0
var points: int = 0
	
func _enter_tree():
	var tile = tile_scene.instantiate()
	tile_size = Vector2(tile.width(), tile.height())
	tile.free()
	
func _ready():
	$AudioTileHit.volume_db = Config.get_option(\"sfx\")
	init_puzzle(PuzzleSet.selected_puzzle)
	if Config.get_option(\"hide_timer\"):
		$Clock.hide()
	
		
func _draw():
	if puzzle_array:
		for v_pair in grid_guidelines:
			draw_line(v_pair[0], v_pair[1], Color.MAGENTA, 0.5 * scale.x)
	
func init_puzzle(puzzle):
	puzzle_array = puzzle._board
	tile_array.resize(puzzle_array.size())
	for i in puzzle_array.size():
		var TA_arr = []
		TA_arr.resize(puzzle_array[0].size())
		tile_array[i] = TA_arr
	center_board()
	initialize_tiles()
	setup_grid_guidelines()

func center_board():
	var window_scaling = DisplayServer.window_get_size().x / ProjectSettings.get_setting(\"display/window/size/viewport_width\")
	var window_size = DisplayServer.window_get_size() / window_scaling
	var pos_x = window_size.x / 2 - (puzzle_array[0].size() * tile_size.x * scale.x / 2) 
	var pos_y = window_size.y / 2 - (puzzle_array.size() * tile_size.y * scale.y / 2) 
	self.position = Vector2(pos_x, pos_y)

func setup_grid_guidelines():
	var board_height = puzzle_array.size() * tile_size.y
	var board_width = puzzle_array[0].size() * tile_size.x
	var h_offset = (tile_size.x / 32)
	var v_offset = (tile_size.y / 32)
	
	var i = (tile_size.x * 5)
	while i < board_width:
		grid_guidelines.push_back([Vector2(i-h_offset, 0), Vector2(i-h_offset, board_height)])
		i += (tile_size.x * 5)
	
	i = (tile_size.y * 5)
	while i < board_height:
		grid_guidelines.push_back([Vector2(0, i-v_offset), Vector2(board_width, i-v_offset)])
		i += (tile_size.y * 5)
	
	
func initialize_tiles():
	var pos_x = 0
	var pos_y = 0
	
	var row_labels = []
	for row in puzzle_array:
		var counter = 0
		var keep_counting = false
		var single_row_labels = []
		for row_item in row:
			if (keep_counting && row_item == 0):
				keep_counting = false
				single_row_labels.push_front(counter)
				counter = 0
			elif (row_item == 1):
				keep_counting = true
				counter += 1
		if counter > 0: single_row_labels.push_front(counter)
		if single_row_labels.size() == 0: single_row_labels.push_front(0)
		row_labels.push_back(single_row_labels)
		
	var col_labels = []
	for col_idx in puzzle_array[0].size():
		var counter = 0
		var keep_counting = false
		var single_col_labels = []
		for row_idx in puzzle_array.size():
			if (keep_counting && puzzle_array[row_idx][col_idx] == 0):
				keep_counting = false
				single_col_labels.push_front(counter)
				counter = 0
			elif (puzzle_array[row_idx][col_idx] == 1):
				keep_counting = true
				counter += 1
		if counter > 0: single_col_labels.push_front(counter)
		if single_col_labels.size() == 0: single_col_labels.push_front(0)
		col_labels.push_back(single_col_labels)
	
	
	var label
	var label_idx = 0
	for row_values in row_labels:
		for label_value in row_values:
			label = tile_label_scene.instantiate()
			pos_x -= label.width()
			label.position = Vector2(pos_x, pos_y)
			label.value = label_value
			label.y_idx = label_idx
			add_child(label)
			label.add_to_group(\"tile_labels\")
			label.add_to_group(\"left_tile_labels\")
		pos_x = 0
		pos_y += label.height()
		label_idx += 1
	
	
	pos_x = 0
	pos_y = 0
	label_idx = 0
	
	for col_values in col_labels:
		for label_value in col_values:
			label = tile_label_scene.instantiate()
			pos_y -= label.height()
			label.position = Vector2(pos_x, pos_y)
			label.value = label_value
			label.x_idx = label_idx
			add_child(label)
			label.add_to_group(\"tile_labels\")
			label.add_to_group(\"top_tile_labels\")
		pos_x += label.width()
		pos_y = 0
		label_idx += 1
	
	
	pos_x = 0
	pos_y = 0
	var tile_x_idx = 0
	var tile_y_idx = 0
	
	points_to_win = 0
	for x in puzzle_array:
		for y in x:
			var tile = tile_scene.instantiate()
			tile.correct = bool(y)
			points_to_win += y
			tile.position = Vector2(pos_x, pos_y)
			tile.x_idx = tile_x_idx
			tile.y_idx = tile_y_idx
			tile.connect('mark_changed', register_points)
			add_child(tile)
			tile.add_to_group(\"tiles\")
			pos_x += tile_size.x
			tile_array[tile_y_idx][tile_x_idx] = tile
			tile_x_idx += 1
			
			
		pos_y += tile_size.y
		pos_x = 0
		tile_y_idx += 1
		tile_x_idx = 0
	
func register_points(point):
	points += point
	if (points == points_to_win): 
		var ps_msg_box: PackedScene = ResourceLoader.load(\"res://message_box.tscn\")
		var msg_box = ps_msg_box.instantiate()
		msg_box.connect('ok', func(): 
			get_parent().remove_child(msg_box)
			msg_box.queue_free()
			change_scene_to.emit(Enums.SCENES.SELECT_LEVEL_MENU)
		)
		get_parent().add_child(msg_box)
		
	
func get_tile_at_position(m_position):
	if !visible: return null
	m_position /= scale
	var col = int(m_position.x / tile_size.x)
	var row = int(m_position.y / tile_size.y)
	var tiles = get_tree().get_nodes_in_group(\"tiles\")
	for tile in tiles:
		if col * tile.width() == tile.position.x && row * tile.height() == tile.position.y:
			return tile
	return null
	
	
	
func get_tile_label_at_position(m_position):
	if !visible: return null
	m_position /= scale
		
	var labels = get_tree().get_nodes_in_group(\"tile_labels\")
	for label in labels:
		var label_pos = label.position
		
		if m_position.x > label_pos.x && m_position.x < label_pos.x + label.width() && \\
			m_position.y > label_pos.y && m_position.y < label_pos.y + label.height():
			return label
	return null
	
	
	
	
func _input(event):
	
	if event is InputEventKey and event.pressed:
		if event.keycode == KEY_ESCAPE:
			$PauseMenu.visible = !$PauseMenu.visible
			if $PauseMenu.visible:
				get_tree().call_group(\"tiles\", \"mask\")
			else:
				get_tree().call_group(\"tiles\", \"unmask\")
			
	if $PauseMenu.visible:
		return
	
	if event is InputEventMouseButton:
		
		if event.pressed:
			
			if event.button_index == MOUSE_BUTTON_LEFT:
				if focused_tile:
					$AudioTileHit.play()
					
					if Config.get_option(\"cross_on_second_click\"):
						match focused_tile.state:
							Enums.TILE_STATE.CLEAR:
								tile_drag_edit_mode = Enums.TILE_STATE.FULL
								focused_tile.state = Enums.TILE_STATE.FULL
								if !focused_tile.correct && Config.get_option(\"auto_check\"):
									focused_tile.autocorrect()
							Enums.TILE_STATE.FULL:
								tile_drag_edit_mode = Enums.TILE_STATE.CROSSED
								focused_tile.state = Enums.TILE_STATE.CROSSED
							Enums.TILE_STATE.CROSSED:
								tile_drag_edit_mode = Enums.TILE_STATE.CLEAR
								focused_tile.state = Enums.TILE_STATE.CLEAR
								
					else:
						if focused_tile.state == Enums.TILE_STATE.FULL:
							tile_drag_edit_mode = Enums.TILE_STATE.CLEAR
							focused_tile.state = Enums.TILE_STATE.CLEAR
						else:
							tile_drag_edit_mode = Enums.TILE_STATE.FULL
							focused_tile.state = Enums.TILE_STATE.FULL
							
							if Config.get_option(\"auto_check\"):
								if !focused_tile.correct:
									focused_tile.autocorrect()
								
					
					
				if focused_tile_label:
					focused_tile_label.crossed_out = !focused_tile_label.crossed_out
					
			if event.button_index == MOUSE_BUTTON_RIGHT:
				if focused_tile:
					if focused_tile.state == Enums.TILE_STATE.CROSSED:
						tile_drag_edit_mode = Enums.TILE_STATE.CLEAR
						focused_tile.state = Enums.TILE_STATE.CLEAR
					else:
						tile_drag_edit_mode = Enums.TILE_STATE.CROSSED
						focused_tile.state = Enums.TILE_STATE.CROSSED
						
			if event.button_index == MOUSE_BUTTON_MIDDLE:
				pan = true
				
			if event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
				scale -= Vector2(0.1, 0.1)
				
			if event.button_index == MOUSE_BUTTON_WHEEL_UP:
				scale += Vector2(0.1, 0.1)
					
		if !event.pressed:
			tile_drag_edit_mode = null
			pan = false
		
		
	if event is InputEventMouseMotion:
		
		if pan:
			self.position += event.relative
			
		if is_instance_valid(focused_tile) && focused_tile.highlighted:
			focused_tile.highlighted = false
		if is_instance_valid(focused_tile_label) && focused_tile_label.highlighted:
			focused_tile_label.highlighted = false		
			
		focused_tile = null
		focused_tile_label = null
		
		var relative_pos = event.position - self.position
		
		for label in highlighted_numbers:
			label.highlighted = false
			
		highlighted_numbers.clear()
		
		if relative_pos.angle() > 0 && relative_pos.angle() < PI / 2:
			focused_tile = get_tile_at_position(event.position - self.position)
			if focused_tile:
				if Config.get_option(\"hl_square\"):
					focused_tile.highlighted = true
				
				if Config.get_option(\"hl_square_numbers\"):
					var top_labels = get_tree().get_nodes_in_group(\"top_tile_labels\")
					for label in top_labels:
						if label.x_idx == focused_tile.x_idx:
							label.highlighted = true
							highlighted_numbers.push_back(label)
						
					var left_labels = get_tree().get_nodes_in_group(\"left_tile_labels\")
					for label in left_labels:
						if label.y_idx == focused_tile.y_idx:
							label.highlighted = true
							highlighted_numbers.push_back(label)
				
				if tile_drag_edit_mode:
					if tile_drag_edit_mode != focused_tile.state && !focused_tile.blinking:
						$AudioTileHit.play()
						
					if (focused_tile.state == Enums.TILE_STATE.CLEAR || focused_tile.state == Enums.TILE_STATE.CROSSED) \\
					 	&& tile_drag_edit_mode == Enums.TILE_STATE.FULL:
						if !focused_tile.correct && Config.get_option(\"auto_check\"):
							focused_tile.autocorrect()
						
					focused_tile.state = tile_drag_edit_mode
					
					
		else:
			focused_tile_label = get_tile_label_at_position(event.position - self.position)
			if focused_tile_label:
				focused_tile_label.highlighted = true


func _on_clock_timer_timeout():
	time_passed += 1
	$Clock.text = Time.get_time_string_from_unix_time(time_passed)


func _on_button_resume_pressed():
	$PauseMenu.hide()

func _on_button_quit_pressed():
	change_scene_to.emit(Enums.SCENES.MAIN_MENU)
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_4ovlq"]
resource_local_to_scene = true

[node name="TileBoard" type="Node2D"]
z_index = 1
scale = Vector2(2, 2)
script = SubResource("GDScript_ruhoe")

[node name="AudioTileHit" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("1_mccf2")

[node name="Clock" type="Label" parent="."]
top_level = true
texture_filter = 1
offset_left = 10.0
offset_top = 10.0
offset_right = 72.0
offset_bottom = 33.0
theme = ExtResource("2_dvq8s")
text = "00:00:00"

[node name="ClockTimer" type="Timer" parent="."]
autostart = true

[node name="PauseMenu" type="PanelContainer" parent="."]
visible = false
top_level = true
z_index = 2
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBox" type="VBoxContainer" parent="PauseMenu"]
layout_mode = 2
theme = ExtResource("3_52v4h")
alignment = 1

[node name="ButtonResume" type="Button" parent="PauseMenu/VBox"]
material = SubResource("ShaderMaterial_4ovlq")
layout_mode = 2
size_flags_horizontal = 4
theme = ExtResource("3_52v4h")
text = "Resume
"

[node name="ButtonSettings" type="Button" parent="PauseMenu/VBox"]
layout_mode = 2
size_flags_horizontal = 4
text = "Settings"

[node name="ButtonQuit" type="Button" parent="PauseMenu/VBox"]
layout_mode = 2
size_flags_horizontal = 4
text = "Quit to menu
"

[connection signal="timeout" from="ClockTimer" to="." method="_on_clock_timer_timeout"]
[connection signal="pressed" from="PauseMenu/VBox/ButtonResume" to="." method="_on_button_resume_pressed"]
[connection signal="pressed" from="PauseMenu/VBox/ButtonQuit" to="." method="_on_button_quit_pressed"]
